==================
Basic Traversal statements
==================

for v in 0..2 outbound 'knows' graph 'social'
    return v

---

(source_file
    (query
    (for_traversal_operation
        (kw_for
        (keyword_operation))
        (identifier)
        (kw_in
        (keyword_operator))
        (depth_range
        (number)
        (number))
        (traversal_direction
        (kw_outbound
            (keyword_traversal)))
        (expression
        (member_expression
            (literal
            (string
                (string_fragment)))))
        (kw_graph
        (keyword_traversal))
        (string
        (string_fragment)))
    (return_operation
        (kw_return
        (keyword_operation))
        (expression
        (member_expression
            (identifier))))))


==================
Vertex and Edges Traversal statements
==================

for v, e in 0..10 outbound 'knows' graph 'social'
    return distinct v

---

(source_file
    (query
    (for_traversal_operation
        (kw_for
        (keyword_operation))
        (identifier)
        (identifier)
        (kw_in
        (keyword_operator))
        (depth_range
        (number)
        (number))
        (traversal_direction
        (kw_outbound
            (keyword_traversal)))
        (expression
        (member_expression
            (literal
            (string
                (string_fragment)))))
        (kw_graph
        (keyword_traversal))
        (string
        (string_fragment)))
    (return_operation
        (kw_return
        (keyword_operation))
        (keyword_distinct)
        (expression
        (member_expression
            (identifier))))))

==================
Advanced Traversal statements
==================

for v, e, p in 0..2 outbound 'knows' graph 'social'
    let edges = p.edges[*]
    let project = {
        name: v.name
    }
    return {
        vertices: path.vertices[*]._key
    }

---

(source_file
    (query
    (for_traversal_operation
        (kw_for
        (keyword_operation))
        (identifier)
        (identifier)
        (identifier)
        (kw_in
        (keyword_operator))
        (depth_range
        (number)
        (number))
        (traversal_direction
        (kw_outbound
            (keyword_traversal)))
        (expression
        (member_expression
            (literal
            (string
                (string_fragment)))))
        (kw_graph
        (keyword_traversal))
        (string
        (string_fragment)))
    (statement
        (let_statement
        (kw_let
            (keyword_operation))
        (identifier)
        (let_value
            (expression
            (member_expression
                (member_expression
                (member_expression
                    (identifier))
                (identifier)))))))
    (statement
        (let_statement
        (kw_let
            (keyword_operation))
        (identifier)
        (let_value
            (expression
            (member_expression
                (object
                (object_pair
                    (property_identifier)
                    (expression
                    (member_expression
                        (member_expression
                        (identifier))
                        (identifier))))))))))
    (return_operation
        (kw_return
        (keyword_operation))
        (expression
        (member_expression
            (object
            (object_pair
                (property_identifier)
                (expression
                (member_expression
                    (member_expression
                    (member_expression
                        (member_expression
                        (identifier))
                        (identifier)))
                    (identifier))))))))))

